[tool.poetry]
name = "named-env"
version = "2.2.1"
description = "Class-based environment variables typed specification"
license = "MIT"
authors = [
    "Artem Novikov <artnew@list.ru>",
]
readme = "README.md"
repository = "https://github.com/reartnew/named-env"
classifiers = [
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.dev-dependencies]
pytest = "^7.4.0"
tox = "^3.28.0"
pytest-pylint = "^0.19.0"
pylint-quotes = "^0.2.3"
pytest-mypy = "^0.10.1"
pytest-black = "^0.3.12"
pytest-bandit = "^0.6.1"

[tool.pytest.ini_options]
testpaths = [
    "src",
    "tests",
]
addopts = """
--pylint
--mypy
--black
--bandit
"""
bandit_targets = ["src"]
filterwarnings = [
    "error",
    "ignore:.*:pytest.PytestWarning",
    "ignore:.*:builtins.DeprecationWarning",
]

[tool.black]
line-length = 120

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pylint.MASTER]
fail-under = 10.0
jobs = 1
load-plugins = ["pylint_quotes"]
unsafe-load-any-extension = "no"

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "too-few-public-methods",
    "broad-except",
    "fixme",
]
enable = ["unused-wildcard-import"]

[tool.pylint.REFACTORING]
max-nested-blocks = 10
never-returning-functions = ["sys.exit"]

[tool.pylint.BASIC]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["l"]
class-attribute-naming-style = "any"
class-naming-style = "any"
class-rgx = "[A-Z][a-zA-Z]*$"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names-rgxs = "^[a-z_]$"
include-naming-hint = "no"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"
indent-after-paren = 4
indent-string = "'    '"
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = "no"
single-line-if-stmt = "no"
string-quote = "double-avoid-escape"
triple-quote = "double"
docstring-quote = "double"

[tool.pylint.MISCELLANEOUS]
notes = "TODO"

[tool.pylint.SIMILARITIES]
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "no"
min-similarity-lines = 50

[tool.pylint.SPELLING]
max-spelling-suggestions = 4
spelling-store-unknown-words = "no"

[tool.pylint.STRING]
check-quote-consistency = "no"
check-str-concat-over-line-jumps = "no"

[tool.pylint.TYPECHECK]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-mixin-members = "yes"
ignore-none = "no"
ignore-on-opaque-inference = "yes"
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
]
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.VARIABLES]
allow-global-unused-variables = "yes"
callbacks = [
    "cb_",
    "_cb",
]
dummy-variables-rgx = "^_$"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]

[tool.pylint.CLASSES]
defining-attr-methods = [
    "__init__",
    "__new__",
    "__post_init__",
]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.DESIGN]
max-args = 20
max-attributes = 50
max-bool-expr = 10
max-branches = 50
max-locals = 50
max-parents = 20
max-public-methods = 100
max-returns = 10
max-statements = 100
min-public-methods = 2

[tool.pylint.IMPORTS]
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "yes"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
]
